If necessary, review <a href="../../StudioDocs/studioheader.html">studio procedures</a> before
starting.
<p>
<H3>Warmup</H3>
<!--#include virtual="../../studioinstructions.shtml"-->
<HR>
<H4>Overview</H4>
In this studio you will explore the following two concepts:
<UL>
  <LI> <b>Writing</b> methods that compute results of interest.
  <LI> <b>Testing</B> methods to develop assurance that the methods compute their results properly.
</UL>
If necessary, review the slides and text material in chapter 2.1 concerning methods.  Once your group is ready,
move on to the next section where you will write and test some methods.
<BLOCKQUOTE>
<B>Important!</B>   Today you must rotate who is doing the typing as you move from one method to the next.  Every person
in your group must have a chance to be the <I>lead</I> person at the keyboard, for at least one method described
below.
<p>
All group members are
encouraged to help the lead person at the keyboard.
</BLOCKQUOTE>
<p>
In preparation for the exercises below, open in eclipse the following, found in the <KBD>studios</KBD> source
folder of your repository:
<UL>
  <LI> <KBD>Methods</KBD> is a file in which you will type the methods described below.
  <LI> <KBD>MethodsTest</KBD> is the <KBD>JUnit</KBD> test that you will run to see if your methods are working
properly.
<BLOCKQUOTE>
You can run the JUnit test even before all of the methods are written into your <KBD>Methods</KBD> class file.
If challenged, persevere and run the JUnit test anyway.  The output you should expect is described below.
</UL>
<H4> Methods </H4>
<BLOCKQUOTE>
In the work you see below, you should be asking yourselves the following
as you write code:
<UL>
  <LI> What is the name of the method I must create?  The name is important,
and if you get it wrong, the test code won't be able to test your code.
The case of every character must agree with what you are asked to write.
The method <KBD>Sum</KBD> is a different method to Java than the method
named <KBD>sum</KBD>.
<LI> What are the types of the input paramters?  These must also agree
with the specification.
<LI> What is the type of the return value, if any?  This must agree
with the specification.
</UL>
</BLOCKQUOTE>
<DL>
  <DT> sum
  <DD> Define a method that accepts two integers and returns their sum as an integer.
<BLOCKQUOTE>
This has already been completed for you to serve as an example.
<UL>
  <LI> To run the JUnit test, go to the Package window, 
right- (control-) click on <KBD>MethodsTest</KBD>, drag down to <KBD>Run as</KBD>, and
select <KBD>JUnit Test</KBD>.
  <LI> The tests will now run and this should not take much time.
  <LI> When the tests have completed, look at the the JUnit window, which should now be open on the left of
your screen.
  <LI> You should now see a a reddish stripe, indicating that at least one test failed.
<BLOCKQUOTE>
The tests that failed did  so because you have not yet written the methods for those tests.  So don't worry (yet).
</BLOCKQUOTE>
  <LI> You should see just in front of the <KBD>testSum</KBD> entry a happy green check mark, because that
test did pass.
<LI>
Take a look at <KBD>MethodsTest</KBD> and the <KBD>testSum</KBD> method therein.   See how it uses
<PRE>
   assertEquals(7, Methods.sum(3,4));
</PRE>
to test the <KBD>sum</KBD> method?
<LI> Add another line in <KBD>testSum</KBD> that ensures the <KBD>sum</KBD> method works on negative values as well.
</UL>
</BLOCKQUOTE>
<DT> mpy
<DD> This one is also done for you, but a mistake has been made on purpose,
so you can see what happens when JUnit finds that your code does not
pass a test.
<UL>
<LI>
When you run JUnit, it runs <I>all</I> the tests in the specified file.
<LI>
A check mark appears next to the ones that work, and an X appears
next to those that did not.
<LI>
Click in the JUnit window on the test <KBD>thisTestShouldFail</KBD>.
<LI> Below in the Failure Trace window, you will see an explanation of
why the test failed.
<BLOCKQUOTE>
If the code you are given works for <KBD>thisTestShouldFail</KBD>, change
it so that it does fail:  change it so that the first parameter of
<KBD>assertEquals</KBD> is 1 instead of 0 or 10.
<p>
Make sure you understand what you see.  The trace shows you the value
that was expected and the value that was computed.
</BLOCKQUOTE>
<LI> Fix the problem, rerun the test, and verify that the test passes.
</UL>
<HR>
<DT> avg3
<DD> 
<UL>
<LI> Write a method <KBD>avg3</KBD> that takes in 3 integers and
returns their average, as an <KBD>double</KBD>.
<LI>
Make sure it passes the unit test.
<LI> Fill in a JavaDoc block above your code to document what you have
done.  You will see the methods provided to you have this already.
<BLOCKQUOTE>
It is easy to do this through eclipse.  Above your method declaration,
simply type <KBD>/**</KBD> and hit enter, and eclipse will automatically
generate the JavaDoc block for you!
</BLOCKQUOTE>
</UL>
<DT> sumArray
<DD> Write a method <KBD>sumArray</KBD> that takes in an <I>array</I> of
<KBD>double</KBD>s and returns their sum as a <KBD>double</KBD>.
<DT> average
<DD> Write a method <KBD>average</KBD> that takes in an <I>array</I> of 
<KBD>double</KBD>s and returns their average as a <KBD>double</KBD>.
<BLOCKQUOTE>
<B>Hint</B> Call the method you already wrote to compute the sum instead
of rewriting or copying code.
</BLOCKQUOTE>
<HR>
<DT> Your call
<DD> As a team, think of a simple method.  The method must return
some kind of value so it can be tested.
<p>
Give your method a name and a 
specification (input types and return type), 
and implement it in the <KBD>Methods</KBD> class.
<p>
In the <KBD>MethodsTest</KBD> class, insert testing code like what you see
for the other methods.
<BLOCKQUOTE>
You must precede the test method by a <KBD>@Test</KBD> directive.  Get
help if necessary.
</BLOCKQUOTE>
<HR>
<DT> Pig Latin
<DD> OK here's a fun one.  Write a method named <KBD>pig</KBD> that takes
ina <KBD>String</KBD> and returns a <KBD>String</KBD>.  That method
should return the <a href="http://en.wikipedia.org/wiki/Pig_Latin">pig latin</a> transformation of
its input.
<BLOCKQUOTE>
Some helpful information:
<UL>
  <LI> If <KBD>s</KBD> is a <KBD>String</KBD>, then
<KBD>s.substring(0,1)</KBD> returns the first character
of <KBD>s</KBD>.
  <LI> If <KBD>s</KBD> is a <KBD>String</KBD>, then
<KBD>s.substring(1)</KBD> returns all but the first character
of <KBD>s</KBD>.
  <LI> For more information, see
<KBD><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#substring%28int%29">substring</a></KBD>.
</UL>
<HR>
<p>
Before you write the code, look at the test!  All you have to do to
satisfy the test is to return a string that begins with the input's
second character, appends the input's first character, and then appends
&quot;ay&quot; at the end.
<p>
This is not really pig latin, but it does satisfy the test I gave you.
<p>
If you want to go for the real thing, read the <a href="http://en.wikipedia.org/wiki/Pig_Latin">article</a> and recode so
that your code does a true pig latin transformation.  Add some 
more tests to show off your improvement.  For example:
<KBD>scram</KBD> &rarr; <KBD>amscray</KBD>.
</BLOCKQUOTE>
</DL>
