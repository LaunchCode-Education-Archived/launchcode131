Read this before starting:
<!--#include virtual="../../../StudioDocs/studioheader.shtml"-->
<HR>
<p>
<BLOCKQUOTE>
<UL>
<LI>
To receive credit for a studio, your team must
cleared by a TA using the green box at the bottom of this page.
<LI>
Be careful how you use the web.  You are required to develop solutions
as a group by thinking not by finding solutions that have been thought
out by others.  You must be able to explain anything that you have done.
</UL>
</BLOCKQUOTE>
<HR>
<H3>Warmup</H3>
<!--#include virtual="../../studioinstructions.shtml"-->
<HR>
<H3>Procedure</H3>
<p>
<UL>
<LI> You will complete a series of simple Java programs, and run each program
to ensure it performs its task correctly.   
<LI> The files for this program
are in the <KBD>studio1</KBD> package of the repository you loaded.
<LI> There are two ways to run programs in this course:
<p>
<UL>
  <LI> <EM>Directly in eclipse:</EM>
To run a program, right- (control-) click on the file's name, choose
<KBD>Run As</KBD>&hellip;<KBD>Java Application</KBD>.  The program will then
launch and prompt you for the inputs it needs.
<BLOCKQUOTE>
Try this now on the <KBD>Hello</KBD> class.  When it asks you how you
are feeling, enter whatever comes to mind.
</BLOCKQUOTE>
<p>
The tools we use are replete with buttons and menus to make programming
easier.   One such button near the top of your eclipse window is a green
circle containing a white triangle:&nbsp;<IMG SRC="Studio/gbutton.png" align=middle>
<p>
Clicking on this button will run the program again.
<BLOCKQUOTE>
Try running the program using the button.  Isn't that more fun?
</BLOCKQUOTE> 

  <LI> <EM>Command line:</EM>  This method simulates how you would run your
program from <I>outside</I> eclipse.  You should see a <KBD>usecommandline.jar</KBD>
file in your studio repo.  Double-click it to run the program, and
a window should appear.
If you click in the lower part of that window, you can type commands into that window, including a command that will run
your Java program.
<BLOCKQUOTE>
For example, to run the <KBD>Hello</KBD> example, included in this studio,
you would type:
<PRE>
java studio1.Hello
</PRE>
<CENTER>
<IMG SRC="Studio/cline.png">
</CENTER>
and hit enter.
<B>
Try that.
</B>
</BLOCKQUOTE>
<p>
On the command line, you can supply the program's inputs directly, instead
of being prompted for them one at a time.
<BLOCKQUOTE>
In the command line window, type:
<PRE>
java studio1.Hello spunky
</PRE>
and hit return.
Notice that the program now uses <KBD>spunky</KBD> as its input.
</BLOCKQUOTE>
</UL>

</UL>
<HR>
<BLOCKQUOTE>
Some of
the following exercises are adapted from Princeton University's
<a href="http://www.cs.princeton.edu/courses/archive/spring12/cos126/precepts.php">COS&nbsp;126 course</a>, based on our text by Sedgewick and Wayne.
</BLOCKQUOTE>
<p>
For each of the following exercises, find the file in your studio repository
and complete it to do the assigned task.
<DL>
  <DT> <KBD>HiOne</KBD>
  <DD> Say hello to the name supplied as input to this program.
Sample output: <KBD>Hi Ron.  How are you?</KBD> (assuming <KBD>Ron</KBD> was supplied
as input)
<BLOCKQUOTE>
Feel free to end the output with punctuation that indicates the level
of enthusiasm associated with your greeting.
</BLOCKQUOTE>

  <DT> <KBD>HiFour</KBD>
  <DD> Expand your hospitality to the <EM>four</EM> names supplied to this program.
Sample output: <KBD>Greetings Cormen, Leiserson, Rivest, and Stein.</KBD>
<p>
<B>Be sure to put in <a href="http://en.wikipedia.org/wiki/Serial_comma">proper punctuation</a> to separate the names.</B>
<DT><KBD>Ordered</KBD>
<DD>Define a boolean variable <KBD>isOrdered</KBD> whose value is 
<KBD>true</KBD> if the three values are either in strictly ascending 
order 
(<KBD>x&nbsp;&lt;&nbsp;y&nbsp;&lt;&nbsp;z</KBD>)
or in strictly descending order 
(<KBD>x&nbsp;&gt;&nbsp;y&nbsp;&gt;&nbsp;z</KBD>),
and <KBD>false</KBD> otherwise. 
Print out the variable <KBD>isOrdered</KBD> using <KBD>System.out.println(isOrdered)</KBD>. 
<BLOCKQUOTE>
Some of you may already know some Java.  We have not yet covered the
<KBD>if</KBD> statement.  You must use what has been taught so far (simple
expressions and assignment) to accomplish this task.
</BLOCKQUOTE>
<DT><KBD>Average</KBD>
<DD>Complete this code so that it prints the average of its two integer inputs.
<BLOCKQUOTE>
Sample output: 
<br>
<KBD>Average of 5 and 6 is 5.5</KBD>
<p>
Note that the output is specified as a <KBD>double</KBD>,
because the average of two integers is not necessarily an integer.
</BLOCKQUOTE>
OK, for this one, you are on your own.  We are not giving you code for this, but will
instruct you how to create your own Java file from scratch:
<p>
<OL>
  <LI> Right- (control-) click on the <KBD>studio1</KBD> package, select
<KBD>New&hellip;Class</KBD>.
   <LI> Type the name <KBD>Average</KBD> and check the box that indicates
you want to create 
<KBD>public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)</KBD>:
<CENTER>
<IMG SRC="Studio/newclass.png" WIDTH=50%>
</CENTER>
    <LI> Click <KBD>Finish</KBD> and your new class shows up in the editor window.
   <LI> At the top of the <KBD>main</KBD> method, you need to insert the
<KBD>ArgsProcessor</KBD> code to accept two integers:
<KBD>n1</KBD>
and
<KBD>n2</KBD>.
<BLOCKQUOTE>
<UL>
<LI>
Refer to other studio code to see how this is done.  
<LI> It is likely that when you type in the code, eclipse will flag your
code with an error, because it doesn't know (yet) about <KBD>ArgsProcessor</KBD>.
<p>
Silly eclipse.
<p>
You can get eclipse to solve its own problem by mousing over the error, and using the first suggestion that pops up, namely to include <KBD>ArgsProcessor</KBD> from
the <KBD>cse131</KBD> package.
<BLOCKQUOTE>
Sometimes eclipse is <I>&uuml;ber</I> silly and won't tell you about that fix until
you have saved your file.  So save it.
</BLOCKQUOTE>
<LI> Try to use meaningful
messages to prompt for values.  The units for the values will be interpreted
as <I>grams</I>.  For example, if <KBD>3</KBD> is specified for <KBD>carbs</KBD>,
that means that this run of your program is for food that has 3 grams of
carbohydrates.
<p>
A not so nice prompt:
<PRE>
int n1 = ap.nextInt("Yo, sup?");
</PRE>
and a nice prompt:
<PRE>
int n1 = ap.nextInt("The first of two integers to be averaged?");
</PRE>
<LI> Run your program and makes sure it prompts you correctly for its values.
<LI> Ask a TA to check your work at this point.
</UL>
</BLOCKQUOTE>
<LI> Finish the class so it prints out the appropriate message.
</OL>

	<DT> <KBD>Grading</KBD>
	<DD> Here you write a program that computes your final score 
for this course,
based on the grades you receive.
This program can be useful in tracking your possible final grades based on
the grades you have already received and the expected grades for your future
assignments.

<OL>
<LI> Review the 
<a href="../../Info/grades.html">grading policy</a> 
for this semester.
<LI>Arrange for your program to accept the student's name as well as
one input for each value used in
computing your final grade according to the 
<a href="../../Info/grades.html">grading policy</a>.  
Unless otherwise stated, the range of each of those values is from 0 to 100.
Below are examples of values used in past semesters:
<UL>
  <LI>The number of <KBD>participation</KBD> points you received
  <LI>Your average <KBD>quiz</KBD> score
  <LI>The number of <KBD>studio</KBD> points you received
  <LI>The number of <KBD>lab</KBD> points you received
  <LI>The number of <KBD>extension</KBD> points you received
  <LI>Your score on <KBD>exam one</KBD>
  <LI>Your score on <KBD>exam two</KBD>
  <LI>Your score on <KBD>exam three</KBD>
</UL>

<BLOCKQUOTE>
Use ArgsProcessor to accept input and store these values using variables with the appropriate data types.
</BLOCKQUOTE>

<LI>Calculate the weighted average of the above values, using weights as
specified in the
<a href="../../Info/grades.html">grading policy</a>.   The result of this
computation should be a <KBD>double</KBD>.

<LI>Since your grade is not rounded for this course, you should convert the
<KBD>double</KBD> to an <KBD>int</KBD>.
<BLOCKQUOTE>
This conversion can be accomplished by <I>casting</I>, a topic you should
find in your text or in the lecture material.
</BLOCKQUOTE>

<LI>Determine if you received a plus or a minus attached to your grade, such as a "B+" or "A-". 
Refer to the 
<a href="../../Info/grades.html">grading policy</a>
for these cutoffs (they are the same 
for each letter grade). Consider using the <a href="http://www.cafeaulait.org/course/week2/15.html">mod operator</a> <KBD>%</KBD> to compute the rightmost
digit of a grade (for example, finding the <KBD>8</KBD> in <KBD>98</KBD>.
Once you have that digit, devise a boolean expression for each of the following:
<UL>
 <LI> Does the rightmost digit warrant a <KBD>+</KBD> on the letter grade?
 <LI> Does the rightmost digit warrant a <KBD>&ndash;</KBD> on the letter grade?
</UL>
</OL>
<P>
Given this input for a given semester's grading policy:
<TABLE BORDER CELLPADDING=5>
<TR> <TD> <KBD>name</KBD></TD> <TD> <KBD>Jarett</KBD></TD> </TR>
<TR> <TD> <KBD>participation</KBD></TD> <TD> <KBD>100</KBD></TD> </TR>
<TR> <TD> <KBD>quizzes</KBD></TD> <TD> <KBD>92</KBD></TD> </TR>
<TR> <TD> <KBD>studios</KBD></TD> <TD> <KBD>100</KBD></TD> </TR>
<TR> <TD> <KBD>labs</KBD></TD> <TD> <KBD>85</KBD></TD> </TR>
<TR> <TD> <KBD>extensions</KBD></TD><TD> <KBD>90</KBD></TD> </TR>
<TR> <TD> <KBD>exam one</KBD></TD> <TD> <KBD>88</KBD></TD> </TR>
<TR> <TD> <KBD>exam two</KBD></TD> <TD> <KBD>94</KBD></TD> </TR>
<TR> <TD> <KBD>exam three</KBD></TD> <TD> <KBD>91</KBD></TD> </TR>
</TABLE>
<br>
Your output might resemble:
<BLOCKQUOTE>
<PRE>
Jarett:
    Total score: 90.65
    Grade for this course: 90
    Final grade has a...
        Plus: false
        Minus: true 
</PRE>
</BLOCKQUOTE>
</DL>
<HR>
<H3>Creative Exercise</H3>
As a group, brainstorm the best data type to represent the following
situations:
<BLOCKQUOTE>
Often, there is no <I>right</I> or <I>wrong</I> answer.  Be prepared
to defend your choices.
</BLOCKQUOTE>
<UL>
  <LI> The number of times you have been to <a href="http://www.teddrewes.com/home/default.aspx">Ted Drewes</a>
  <LI> Whether you like <a href="http://www.teddrewes.com/sitecontent/dynamiccontent.aspx?pid=76&uid=D18D6B6C-7948-4C04-8F59-12F77F9F3F49">vanilla frozen custard</a> or not
  <LI> The number of people you can take in your car
  <LI> The price of a small cup of <a href="http://www.teddrewes.com/sitecontent/dynamiccontent.aspx?pid=76&uid=D18D6B6C-7948-4C04-8F59-12F77F9F3F49">vanilla frozen custard</a>
  <LI> The name of 
your favorite <a href="http://www.teddrewes.com/sitecontent/Specials.aspx">special</a> offering from
<a href="http://www.teddrewes.com/home/default.aspx"> Ted Drewes</a> 
  <LI> The 
<a href="http://www.teddrewes.com/sitecontent/dynamiccontent.aspx?pid=92&uid=1FA7B06F-39EC-4A8E-8A31-23EE0B783705">address </a>
of the 
<a href="http://www.teddrewes.com/home/default.aspx#">Ted Drewes </a>
that is closest to campus
  <LI> The percentage of calories in
<a href="http://www.teddrewes.com/sitecontent/dynamiccontent.aspx?pid=76&uid=D18D6B6C-7948-4C04-8F59-12F77F9F3F49">vanilla frozen custard</a> that come
from fat
   <LI> The probability that you will see a friend at
<a href="http://www.teddrewes.com/home/default.aspx">Ted Drewes</a> when you go there
</UL>
</DL>
