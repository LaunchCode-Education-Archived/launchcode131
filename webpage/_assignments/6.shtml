---
title: Welcome to CSE131!
week: 0
assigned: ???
due: ???
---
<H3>Procedure</H3>
<BLOCKQUOTE>
Preparation:
<UL>
<LI> It is suggested that you do this lab with somebody else, in pairs.
<LI> If you choose to work in pairs, both group members must understand
all written an coded material.
<LI> Complete your work in either member's repository.
<LI> When you demo, both group members must be present.
<LI>
Update your repository so that you see a <KBD>lab6</KBD> package in the <KBD>labs</KBD> source folder.
</UL>
</BLOCKQUOTE>
<OL>
<LI> Consider the old camp song:
<BLOCKQUOTE>
<I>n</I> bottles of beer on the wall, <I>n</I> bottles of beer;
you take one down, pass it around, <I>n-1</I> bottles of beer on the wall.
<p>
<I>n-1</I> bottles of beer on the wall, <I>n-1</I> bottles of beer;
you take one down, pass it around, <I>n-2</I> bottles of beer on the wall.
<p>
&hellip;
</BLOCKQUOTE>
and so on down to 0 bottles of beer on the wall.
<p>
<UL>
<LI> Find the recursive substructure in the above song.
<LI> Create a new class <KBD>Beer</KBD> in your <KBD>lab6</KBD> package.
<BLOCKQUOTE>
Be sure to check the box that asks for <KBD>public static void main</KBD> to be generaated.
</BLOCKQUOTE>
<LI>
In your <KBD>Beer</KBD> class,
develop a recursive algorithm <KBD>String bottlesOfBeer(int n)</KBD> 
that computes the song starting at <KBD>n</KBD> and ending at <KBD>0</KBD>.
Your recursive method should not print anything, but when
your algorithm is working, print the string finally returned by the recursive
method.
<LI> Write code into the <KBD>main</KBD> method of <KBD>Beer</KBD> to call <KBD>bottlesOfBeer(5)</KBD> and print
out the string returned by that method.
<LI> Test your program for other input parameters.
Be prepared to demo this for a TA to receive credit for this lab.
</UL>
<HR>
<LI>  Here is a simple but interesting recursive function.
<PRE>
   f(x) =    x-10     if x > 100
        = f(f(x+11))  if x <= 100
</PRE>
<UL>
 <LI> Using the substitution model, sketch the computation of <KBD>f(99).</KBD>
<BLOCKQUOTE>
Be prepared to show your substitution model computation to a TA when you demo.
</BLOCKQUOTE>
 <LI> Sketch the computation of <KBD>f(87).</KBD>
 <LI> Be prepared to answer the following questions about the above code:
<UL>
<LI> 
Will this function terminate for all positive
      integers supplied as arguments.
 <LI> What do you expect this function to do for values of x > 100?
 <LI> How will it behave for values <= 100?
</UL>
 <LI> In the <KBD>Methods</KBD> class, Implement the function, test it to develop or valdiate your hypotheses,
and be prepared to demo your function to a TA.
</UL>
<HR>
<LI> Here is another interesting recursive function:
<PRE>
  g(x,y)  = y+1               if x = 0
          = g(x-1,1)          if x > 0 and y = 0
          = g(x-1, g(x, y-1)) if x > 0 and y > 0
</PRE>
<UL>
 <LI> Using the substitution model, sketch the computations  of 
  <UL>
     <LI> <KBD>g(1,0)</KBD>
     <LI> <KBD>g(1,2)</KBD>
       <LI> <KBD>g(2,2)</KBD>
  </UL>
 <LI> Will this function terminate for all positive
      integers supplied as arguments?
  <LI> How do you expect
this function behave with respect to <KBD>x</KBD> and
<KBD>y</KBD>?
  <LI> Implement it and try it out for values of x < 4 and various values
    of y.
  <LI> Now try it for x = 4 and various values of y.
  <LI> What do you see?
<BLOCKQUOTE>
You may be interested to know that the red square button will terminate your application.
</BLOCKQUOTE>
  <LI> Why does the function behave this way?
</UL>
<p>
<HR>
<LI> Consider the picture below.
<p>
<UL>
<LI> Think about what you see:  what is foreground and what is background?
<LI> Develop an approach for drawing the figure recursively.
<UL>
  <LI> What is the base case?
  <LI> What are the recursive calls doing?
</UL>
<LI> Create a <KBD>Triangles</KBD> class in the <KBD>lab6</KBD> package.
<LI> Implement your ideas in the <KBD>Triangles</KBD> class, and be prepared to demo and discuss
your code to a TA to receive credit for this lab.
</UL>
<CENTER>
<IMG WIDTH="50%" SRC="Lab/Description/triangle.png">
</CENTER>
</OL>
